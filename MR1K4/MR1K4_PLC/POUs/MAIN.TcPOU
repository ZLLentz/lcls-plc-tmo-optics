<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4022.18">
  <POU Name="MAIN" Id="{ae72d836-3482-4379-9fb1-810bae149315}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM MAIN
VAR
	// M1K4
	// Motors
	{attribute 'TcLinkTo' := '.bLimitForwardEnable:=TIIB[EL7041-1000_M1K4_Yup]^STM Status^Status^Digital input 1;
                              .bLimitBackwardEnable:=TIIB[EL7041-1000_M1K4_Yup]^STM Status^Status^Digital input 2'}
	{attribute 'pytmc' := '
		pv: MR1K4:KFE:MMS:YUP
	'}
	M1 : DUT_MotionStage := (fVelocity:=200, nEnableMode:=ENUM_StageEnableMode.ALWAYS); // M1K4 Yup
	fbMotionStage_m1 : FB_MotionStage;

	{attribute 'TcLinkTo' := '.bLimitForwardEnable:=TIIB[EL7041-1000_M1K4_Ydwn]^STM Status^Status^Digital input 1;
                              .bLimitBackwardEnable:=TIIB[EL7041-1000_M1K4_Ydwn]^STM Status^Status^Digital input 2'}
	{attribute 'pytmc' := '
		pv: MR1K4:KFE:MMS:YDWN
	'}
	M2 : DUT_MotionStage := (fVelocity:=200, nEnableMode:=ENUM_StageEnableMode.ALWAYS); // M1K4 Ydwn
	fbMotionStage_m2 : FB_MotionStage;

	{attribute 'TcLinkTo' := '.bLimitForwardEnable:=TIIB[EL7041-1000_M1K4_Xup]^STM Status^Status^Digital input 1;
                              .bLimitBackwardEnable:=TIIB[EL7041-1000_M1K4_Xup]^STM Status^Status^Digital input 2'}
	{attribute 'pytmc' := '
		pv: MR1K4:KFE:MMS:XUP
	'}
	M3 : DUT_MotionStage := (fVelocity:=1000, nEnableMode:=ENUM_StageEnableMode.ALWAYS); // M1K4 Xup
	fbMotionStage_m3 : FB_MotionStage;

	{attribute 'TcLinkTo' := '.bLimitForwardEnable:=TIIB[EL7041-1000_M1K4_Xdwn]^STM Status^Status^Digital input 1;
                              .bLimitBackwardEnable:=TIIB[EL7041-1000_M1K4_Xdwn]^STM Status^Status^Digital input 2'}
	{attribute 'pytmc' := '
		pv: MR1K4:KFE:MMS:XDWN
	'}
	M4 : DUT_MotionStage := (fVelocity:=1000, nEnableMode:=ENUM_StageEnableMode.ALWAYS); // M1K4 Xdwn
	fbMotionStage_m4 : FB_MotionStage;

	{attribute 'TcLinkTo' := '.bLimitForwardEnable:=TIIB[EL7041-1000_M1K4_PitchCoarse]^STM Status^Status^Digital input 1;
                              .bLimitBackwardEnable:=TIIB[EL7041-1000_M1K4_PitchCoarse]^STM Status^Status^Digital input 2'}
	{attribute 'pytmc' := '
		pv: MR1K4:KFE:MMS:PITCH
	'}
	M5 : DUT_MotionStage := (fVelocity := 150); // M1K4 Pitch Stepper

	{attribute 'TcLinkTo' := '.bLimitForwardEnable:=TIIB[EL7041-1000_M1K4_Bender]^STM Status^Status^Digital input 1;
                              .bLimitBackwardEnable:=TIIB[EL7041-1000_M1K4_Bender]^STM Status^Status^Digital input 2'}
	{attribute 'pytmc' := '
		pv: MR1K4:KFE:MMS:BENDER
	'}
	M6 : DUT_MotionStage; // M1K4 Bender
	fbMotionStage_m6 : FB_MotionStage;

	{attribute 'TcLinkTo' := '.fbRunHOMS.bSTOEnable1:=TIIB[EL1004_M1K4_STO]^Channel 1^Input;
                              .fbRunHOMS.bSTOEnable2:=TIIB[EL1004_M1K4_STO]^Channel 2^Input;
	                          .fbRunHOMS.stYupEnc.Count:=TIIB[EL5042_M1K4_Yupdwn]^FB Inputs Channel 1^Position;
	                          .fbRunHOMS.stYdwnEnc.Count:=TIIB[EL5042_M1K4_Yupdwn]^FB Inputs Channel 2^Position;
	                          .fbRunHOMS.stXupEnc.Count:=TIIB[EL5042_M1K4_Xupdwn]^FB Inputs Channel 1^Position;
	                          .fbRunHOMS.stXdwnEnc.Count:=TIIB[EL5042_M1K4_Xupdwn]^FB Inputs Channel 2^Position'}
	{attribute 'pytmc' := '
		pv: MR1K4:KFE
	'}
	M1K4 : DUT_HOMS;

	// Encoder Arrays/RMS Watch:
	{attribute 'pytmc' := '
		pv: MR1K4:KFE:Y_ENC
	'}
	fbYRMSErrorM1K4 : FB_RMSWatch;
	fMaxYRMSErrorM1K4 : LREAL;
	fMinYRMSErrorM1K4 : LREAL;

	{attribute 'pytmc' := '
		pv: MR1K4:KFE:X_ENC
	'}
	fbXRMSErrorM1K4 : FB_RMSWatch;
	fMaxXRMSErrorM1K4 : LREAL;
	fMinXRMSErrorM1K4 : LREAL;

	{attribute 'pytmc' := '
		pv: MR1K4:KFE:PITCH_ENC
	'}
	fbPitchRMSErrorM1K4 : FB_RMSWatch;
	fMaxPitchRMSErrorM1K4 : LREAL;
	fMinPitchRMSErrorM1K4 : LREAL;

	{attribute 'pytmc' := '
		pv: MR1K4:KFE:BENDER_ENC
	'}
	fbBenderRMSErrorM1K4 : FB_RMSWatch;
	fMaxBenderRMSErrorM1K4 : LREAL;
	fMinBenderRMSErrorM1K4 : LREAL;

	// Pitch Control
	fbM1K4PitchControl : FB_PitchControl;
	bM1K4PitchDone : BOOL;
	bM1K4PitchBusy : BOOL;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[// M1L0
M1K4.fbRunHOMS(stYup:=M1,
               stYdwn:=M2,
               stXup:=M3,
               stXdwn:=M4,
               stPitch:=M5,
               stBender:=M6,
	           nYupEncRef:=GVL_M1K4_Constants.nYUP_ENC_REF,
               nYdwnEncRef:=GVL_M1K4_Constants.nYDWN_ENC_REF,
               nXupEncRef:=GVL_M1K4_Constants.nXUP_ENC_REF,
               nXdwnEncRef:=GVL_M1K4_Constants.nXDWN_ENC_REF,
			   bExecuteCoupleY:=M1K4.bExecuteCoupleY,
               bExecuteCoupleX:=M1K4.bExecuteCoupleX,
			   bExecuteDecoupleY:=M1K4.bExecuteDecoupleY,
               bExecuteDecoupleX:=M1K4.bExecuteDecoupleX,
               bGantryAlreadyCoupledY=>M1K4.bGantryAlreadyCoupledY,
               bGantryAlreadyCoupledX=>M1K4.bGantryAlreadyCoupledX,
               nCurrGantryY=>M1K4.nCurrGantryY,
               nCurrGantryX=>M1K4.nCurrGantryX);

// Convert nCurrGantry to um (smaller number) to read out in epics
M1K4.fCurrGantryY_um := LINT_TO_REAL(M1K4.nCurrGantryY) / 1000.0;
M1K4.fCurrGantryX_um := LINT_TO_REAL(M1K4.nCurrGantryX) / 1000.0;

// FB_MotionStage's for non-piezo axes
fbMotionStage_m1(stMotionStage:=M1);
fbMotionStage_m2(stMotionStage:=M2);
fbMotionStage_m3(stMotionStage:=M3);
fbMotionStage_m4(stMotionStage:=M4);
fbMotionStage_m6(stMotionStage:=M6);

// Calculate Pitch RMS Error:
fbYRMSErrorM1K4(stMotionStage:=M1,
	            fMaxRMSError=>fMaxYRMSErrorM1K4,
				fMinRMSError=>fMinYRMSErrorM1K4);

fbXRMSErrorM1K4(stMotionStage:=M3,
	            fMaxRMSError=>fMaxXRMSErrorM1K4,
				fMinRMSError=>fMinXRMSErrorM1K4);

fbPitchRMSErrorM1K4(stMotionStage:=M5,
	                fMaxRMSError=>fMaxPitchRMSErrorM1K4,
					fMinRMSError=>fMinPitchRMSErrorM1K4);

// Pitch Control
M5.fVelocity := 150.0;
fbM1K4PitchControl(Pitch:=GVL_M1K4.M1K4_Pitch,
				   Stepper:=M5,
				   lrCurrentSetpoint:=M5.fPosition,
                   q_bDone=>bM1K4PitchDone,
                   q_bBusy=>bM1K4PitchBusy);
// When STO hit, need to reset SP
IF NOT M5.bHardwareEnable THEN
	M5.fPosition := M5.stAxisStatus.fActPosition;
END_IF]]></ST>
    </Implementation>
  </POU>
</TcPlcObject>